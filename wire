#!/bin/bash

# wire
# sudo wire <interface> <ssid>   # start wire and connect to ssid network
# sudo wire <interface>          # start wire in automatic mode
# sudo wire m                    # start wire in manual selection mode
# sudo wire                      # start wire

# wire version
version="0.0.3"

# customizable variables
# mode         : interface mode
# ping default : remote host used to test ping
# nameserver   : default nameserver to add in /etc/resolv.conf if none available
# interval     : time interval (in seconds) of ping test
# refresh      : total interval time in seconds = refresh * interval
mode="managed"
ping_default=8.8.8.8
nameserver_default=8.8.8.8
interval=120
refresh=1

# log
# save_log  : set true to save log fileWiRe initiated
# save_ssid : set true to save the ssid you connect to
# log_file  : path to log file
save_log=true
save_ssid=true
current_user=$(who am i | awk '{print $1}')
log_id=$(date +"%s" | tail -c 6)
log_file=/home/$current_user/wire-$log_id

# wpasupplicant config
wpa_supplicant_file="/etc/wpa_supplicant/wpa_supplicant.conf"

# script variables
# do not change
wire_initiated=$(date +"%D - %r")
interface=$1
ssid=$2
interval_visual=$(($refresh * $interval))
restart=true
pause_min=1.5
pause_max=3
# counters
count_restored=0
count_dhcp=0
timeout_dhcp=8
count_dhcp_loops=0
timeout_dhcp_loops=5
count_ping=0
timeout_ping=3
count_ping_loops=0
timeout_ping_loops=4
count_restore_pings=0 # review: count success and error pings
count_state=0
timeout_state=25
# error counters
errors=0
error_undefined=0
error_disconnected=0
error_disabled=0
error_reboot=0
error_scan=0
error_timeout_state=0
error_no_state=0
error_timeout_dhcp=0
error_timeout_dhcp_loops=0
error_timeout_ping=0
error_timeout_ping_loops=0

trap wire_end EXIT
trap wire_exit_options SIGINT

# wire

  function wire_start {
    banner
    if [ $(id -u) != "0" ]; then
        echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[31mYou have to run this script as root or with sudo!\e[0m" >&2
        write_log="false"
        line
        exit 1
    fi
    if [ "$save_log" != true ]; then
      log_file=/dev/null
    fi
    if [ ! "$interface" ]; then
      echo -n " Enter network interface to use (example: wlan0): "; read interface;
      line
    fi
    echo " ["$wire_initiated"] WiRe initiated" >> $log_file
    echo " ["$(date +"%r")"] Interval: "$interval_visual" (seconds)" >> $log_file
    interface_id
  }

  function wire_end {
    if [ ! "$write_log" = "false" ]; then
      echo " ["$(date +"%D - %r")"] WiRe terminated" >> $log_file
    fi
  }

  function wire_init {
    echo " ["$(date +"%r")"] Interface: "$interface >> $log_file
    interface_print
    if [ "$ssid" = "" ]; then
      dhcp
    elif [ "$ssid" = "m" ]; then
      setup_manual_selection
    else
      line
      echo -e " \e[33mSSID: "$ssid"\e[0m"
      line
      setup_manual_ssid
    fi
  }

  function wire_exit_options {
    echo -e " \e[33mExit options: \e[0m"
    line
    if [ "$save_log" = "true" ]; then
      echo -e " - \e[1ml\e[0m to show log"
    fi
    echo -e " - \e[1me\e[0m to show error log"
    echo -e " - \e[1ms\e[0m to show saved networks"
    echo -e " - \e[1mn\e[0m to show network configuration"
    echo -e " - \e[1mq\e[0m to quit"
    line
    echo -n " Type an option and press enter: "; read option;
    line
    if [ "$option" = "q" ]; then
      exit 1
    elif [ "$option" = "e" ]; then
      echo -e " \e[33mError log \e[0m"
      problem_table
      wire_exit_options
    elif [ "$option" = "s" ]; then
      echo -e " \e[33mSaved networks in "$wpa_supplicant_file"\e[0m"
      line
      echo -e "\e[90m"
      cat $wpa_supplicant_file | grep -v '^#' | grep "ssid" | awk -F "=" '{print $2}'
      echo -e "\e[0m"
      line
      wire_exit_options
    elif [ "$option" = "n" ]; then
      echo " Network configuration "
      line
      echo -e " \e[33mInterfaces: /etc/network/interfaces \e[0m"
      line
      echo -e "\e[90m"
      cat /etc/network/interfaces
      echo -e "\e[0m"
      line
      echo -e " \e[33mWpa configuration: "$wpa_supplicant_file"\e[0m"
      line
      echo -e "\e[90m"
      cat /etc/network/interfaces
      echo -e "\e[0m"
      line
      echo -e " \e[33mNameserver configuration: /etc/resolv.conf \e[0m"
      line
      echo -e "\e[90m"
      cat /etc/resolv.conf
      echo -e "\e[0m"
      line
      echo -e " \e[33mHosts file: /etc/hosts \e[0m"
      line
      echo -e "\e[90m"
      cat /etc/hosts
      echo -e "\e[0m"
      line
      wire_exit_options
    elif [ "$option" = "l" ]; then
      if [ $save_log = true ]; then
        echo -e " \e[33mLog: "$log_file"\e[0m"
        line
        echo -e "\e[90m"
        cat $log_file
        echo -e "\e[0m"
        line
        wire_exit_options
      else
        echo -e " \e[31mNo log for this session, set variable save_log=true and restart wire\e[0m"
        line
        wire_exit_options
      fi
    else
      echo -e " \e[31mWrong option selected\e[0m"
      line
      wire_exit_options
    fi
  }

# setup

  function setup_start {
    if [ -x /usr/sbin/NetworkManager ]; then
      setup_conflict
    elif [ -x /usr/sbin/wicd ]; then
      setup_conflict
    elif [ -x /usr/sbin/connmand ]; then
      setup_conflict
    else
      setup_iw_verify
    fi
  }

  function setup_conflict {
    echo -e "\e[31merror\e[0m"
    line
    echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[31mYou cannot use wire together with NetworkManager, wicd or ConnMan \e[0m"
    write_log="false"
    line
    exit 1
  }

  function setup_exit {
    write_log="false"
    exit 1
  }

  function setup_iw_verify {
    if [ -x /sbin/iw ]; then
      setup_wpasupplicant_verify
    else
      echo -en "\e[31merror: \e[0m"
      echo -e " \e[31miw not installed \e[0m"
      line
      echo -e " \e[31mA required package is missing, install with: \n \e[1msudo apt-get install iw\e[0m\e[0m"
      line
      setup_exit
    fi
  }

  function setup_wpasupplicant_verify {
    if [ -x /sbin/wpa_supplicant ]; then
      setup_conf_verify
    else
      echo -en "\e[31merror: \e[0m"
      echo -e " \e[31mwpasupplicant not installed \e[0m"
      line
      echo -e " \e[31mA required package is missing, install with: \n \e[1msudo apt-get install wpasupplicant\e[0m\e[0m"
      line
      setup_exit
    fi
  }

  function setup_conf_verify {
    if [ -e "$wpa_supplicant_file" ]; then
      check_ctrl_if=$(cat $wpa_supplicant_file | grep -v '^#' | grep "ctrl_interface" | awk '{print $1}')
      if [ "$check_ctrl_if" = "" ]; then
        echo "ctrl_interface=DIR=/var/run/wpa_supplicant" | cat - $wpa_supplicant_file > /tmp/wireconf && mv /tmp/wireconf $wpa_supplicant_file
      fi
      setup_wpasupplicant
    else
      echo -e "\e[31merror \e[0m"
      line
      echo -e " \e[31mwpasupplicant configuration file not found \e[0m"
      echo " File missing: "$wpa_supplicant_file
      line
      echo " Create a configuration file with a text editor and add a network. Example:"
      echo -e "\n\e[90mnetwork={"
      echo "  ssid=\"MyWirelessNetwork\""
      echo "  psk=\"myinternetpassword\""
      echo -e "}\e[0m\n"
      line
      setup_exit
    fi
  }

  function setup_restart {
    please_wait
    echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[33mNetworking restart, might take a while\e[0m"
    line
    service networking restart &> /dev/null && setup_wpasupplicant
  }

  function setup_wpasupplicant {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] System configuration: "
    pid=$(pidof "wpa_supplicant" | awk '{print $1}')
    if [ "$pid" != "" ]; then
        wpa_supplicant -B -i $interface -c $wpa_supplicant_file &> /dev/null
    else
        wpa_supplicant -B -g /var/run/wpa_supplicant-global -i $interface -c $wpa_supplicant_file &> /dev/null
    fi
    sleep $pause_min
    echo -e "\e[32mok\e[0m"
    line
    wpa_cli -i $interface status &> /dev/null
    if [ $? != 0 ]; then
      if [ $restart = true ]; then
        echo -en "\e[31merror: \e[0m"
        echo -e "\e[31mrestartin networking \e[0m"
        line
        restart=false
        setup_restart
      else
        echo -e " \e[31mUnable to start wpasupplicant \e[0m"
        line
        setup_exit
        exit 1
      fi
    fi
    wpa_cli -i $interface set ap_scan 1 &> /dev/null
    wpa_cli -i $interface set autoscan periodic:3 &> /dev/null
    wpa_cli -i $interface set fast_reauth 1 &> /dev/null
    wpa_cli -i $interface set filter_ssids 1 &> /dev/null
    wpa_cli -i $interface set ignore_old_scan_res 1 &> /dev/null
    wpa_cli -i $interface set disassoc_low_ack 1 &> /dev/null
    wpa_cli -i $interface set ap_max_inactivity 90 &> /dev/null
    wpa_cli -i $interface set persistent_reconnect 1 &> /dev/null
    wpa_cli -i $interface set save_config 1 &> /dev/null
    wpa_cli -i $interface set update_config 1 &> /dev/null
    wpa_cli -i $interface reconfigure &> /dev/null
    sleep 1
    setup_nameserver_verify
  }

  function setup_nameserver_verify {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] DNS configuration: "
    nameserver=$(cat /etc/resolv.conf | grep -v '^#' | grep nameserver | awk '{print $2}')
    sleep $pause_min
    if [ "$nameserver" = "" ]; then
      echo -e "\e[31mno nameserver available, adding default: "$nameserver_default"\e[0m"
      echo $nameserver_default >> /etc/resolv.conf
    fi
    echo -e "\e[32mok\e[0m"
    line
    wire_init
  }

  function setup_manual_ssid {
    network_id=$(wpa_cli -i wlan1 list_network | grep $ssid | awk -F " " '{print $1}')
    if [ "$network_id" = "" ]; then
      echo -e " \e[31mThe SSID selected is not configured in: "$wpa_supplicant_file"\e[0m"
      echo -e " \e[31mList of your saved networks\e[0m"
      line
      echo -e "\e[90m"
      cat $wpa_supplicant_file | grep -v '^#' | grep "ssid" | awk -F "=" '{print $2}'
      echo -e "\e[0m"
      line
      sleep $pause_max
      echo -e " [\e[90m"$(date +"%T")"\e[0m] Continuing with automatic network selection "
      line
      dhcp
    else
      wpa_cli -i $interface select_network $network_id &> /dev/null
      if [ $? = 0 ]; then
        wpa_cli -i $interface reconfigure &> /dev/null
        sleep $pause_max
        dhcp
      else
        error="state"
        problem $error
      fi
    fi
  }

  function setup_manual_selection {
    line
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Scanning: "
    list=($(iwlist $interface scan 2>/dev/null | awk -F":" '/ESSID/{print $2}'))
    if [ "$list" = "" ]; then
      echo -e "\e[31merror\e[0m"
      line
      echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[31mNo network available \e[0m"
      line
      setup_exit
    else
      echo -e "\e[32mok\e[0m"
      line
      echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[33mSelect a network (type number)\e[0m"
      line
      select item in "${list[@]}"; do
        ssid=$(echo ${item//\"/})
        line
        if [ "$ssid" = "" ]; then
          echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[31mSelection not valid\e[0m"
          line
          setup_exit
        else
          echo -e " \e[33mSSID: "$ssid"\e[0m"
          line
          setup_manual_ssid
        fi
      done
    fi
  }

# interface

  function interface_id {
    ip link show $interface &> /dev/null
    if [ $? != 0 ]; then
        echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[31mInterface "$interface "does not exist or is not plugged in\e[0m"
        line
        interface_not_working
        exit 1
    else
      setup_start
    fi
  }

  function interface_print {
    echo -e " [\e[90m"$(date +"%T")"\e[0m] Interface: \e[1m"$interface"\e[0m"
  }

  function interface_reboot {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Interface: "
    sleep $pause_min
    ip link show $interface &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32mok\e[0m"
      interface_flush
    else
      echo -e "\e[31merror\e[0m"
      error="reboot"
      problem $error
    fi
  }

  function interface_flush {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Release: "
    sleep $pause_min
    dhclient -r $interface &> /dev/null
    sleep $pause_min
    ip addr flush dev $interface &> /dev/null
    sleep $pause_min
    wpa_cli -i $interface flush &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32mok\e[0m"
      interface_down
    else
      echo -e "\e[31merror\e[0m"
      error="reboot"
      problem $error
    fi
  }

  function interface_down {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Interface down: "
    sleep $pause_min
    ip link set $interface down &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32mok\e[0m"
      interface_mode
    else
      echo -e "\e[31merror\e[0m"
      error="reboot"
      problem $error
    fi
  }

  function interface_mode {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Interface mode: "
    sleep $pause_min
    iwconfig $interface mode $mode &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32m"$mode"\e[0m"
      interface_up
    else
      echo -e "\e[31merror\e[0m"
      error="reboot"
      problem $error
    fi
  }

  function interface_up {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Interface up: "
    sleep $pause_min
    ip link set dev $interface up &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32mok\e[0m"
      interface_tune
    else
      echo -e "\e[31merror\e[0m"
      error="reboot"
      problem $error
    fi
  }

  function interface_tune {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Interface configuration: "
    sleep $pause_min
    iwconfig $interface channel auto &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32mok\e[0m"
      interface_scan
    else
      echo -e "\e[31merror\e[0m"
      error="reboot"
      problem $error
    fi
  }

  function interface_scan {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Scanning for available network(s): "
    wpa_cli -i $interface scan &> /dev/null
    if [ $? = 0 ]; then
      echo -en "\e[32mok\e[0m"
      connection_state_verify
    else
      echo -e "\e[31merror\e[0m"
      error="state"
      problem $error
    fi
  }

  function interface_reassociate {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Attempt to reassociate with lost network"
    wpa_cli -i $interface reauthenticate &> /dev/null
    if [ $? = 0 ]; then
      wpa_cli -i $interface reassociate &> /dev/null
      sleep $pause_min
      connection_state_verify
    else
      interface_scan
    fi
  }

  function interface_ip {
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Check IP address: "
    sleep $pause_min
    source_addr=$(ifconfig $interface | grep -Po '\b(?!255)(?:\d{1,3}\.){3}(?!255)\d{1,3}\b')
    if [ $source_addr != "" ]; then
      echo $source_addr
      state=$(wpa_cli -i $interface status 2> /dev/null | grep "wpa_state" | awk -F "=" '{print $2}')
      if [ $state = "COMPLETED" ]; then
        ping_loop
      else
        connection_state_verify
      fi
    else
      echo -e "\e[31mno address\e[0m"
      state=$(wpa_cli -i $interface status 2> /dev/null | grep "wpa_state" | awk -F "=" '{print $2}')
      if [ $state = "COMPLETED" ]; then
        dhcp
      else
        connection_state_verify
      fi
    fi
  } 2> /dev/null

  function interface_not_working {
    echo " The following is the output of your /etc/network/interfaces "
    echo -en "\e[90m"
    sed '/^#/d;' /etc/network/interfaces
    echo -e "\e[0m"
    line
    echo " Check your interface configuration. Example of correct /etc/network/interfaces"
    echo -e "\n\e[90mauto wlan0"
    echo "iface wlan0 inet manual"
    echo -e "wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf\e[0m\n"
    line
    if [ -x /usr/sbin/rfkill ]; then
      echo " Check below if any wireless network interface is blocked."
      echo " If interface is hard blocked you need to physically switch it on."
      echo " You can try to unblock wifi interface(s) with the command: 'sudo rfkill unblock wifi'"
      line
      echo -e "\e[90m"
      rfkill list wifi
      echo -e "\e[0m"
      line
    else
      echo " Check if the wireless interface is switched on and not blocked by your system."
      line
    fi
  }

# dhcp

  function dhcp {
    count_dhcp_loops=$((count_dhcp_loops + 1))
    if [ "$count_dhcp_loops" -eq "$timeout_dhcp_loops" ]; then
      error="timeout_dhcp_loops"
      problem $error
    else
      echo -en " [\e[90m"$(date +"%T")"\e[0m] \e[33mSent dhcp request\e[0m"
      dhclient -nw $interface &> /dev/null
      sleep $pause_min
      dhcp_verify
    fi
  }

  function dhcp_verify {
    count_dhcp=0
    while true; do
      if [ "$count_dhcp" -le "$timeout_dhcp" ]; then
        source_addr=$(ifconfig $interface | grep -Po '\b(?!255)(?:\d{1,3}\.){3}(?!255)\d{1,3}\b' 2> /dev/null)
        if [ ! $source_addr = "" ]; then
          echo
          echo -e " [\e[90m"$(date +"%T")"\e[0m] IP address: "$source_addr
          ping_loop
        else
          echo -en "\e[33m.\e[0m"
        fi
      else
        echo
        error="timeout_dhcp"
        problem $error
      fi
      count_dhcp=$((count_dhcp + 1))
      sleep $pause_min
    done
  }

  # ping

  function ping_single {
    count_restore_pings=$((count_restore_pings + 1))
    source_addr=$(ifconfig $interface | grep -Po '\b(?!255)(?:\d{1,3}\.){3}(?!255)\d{1,3}\b' 2> /dev/null)
    if [ "$source_addr" = "" ]; then
      source_def=$interface
    else
      source_def=$source_addr
    fi
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Send PING to \e[1m"$ping_default"\e[0m from \e[1m"$source_def"\e[0m ("$count_restore_pings"): "
    ping -I "$source_def" -B -c 1 -n -w 4 $ping_default &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32mok\e[0m"
      sleep $pause_min
      connection_active
    else
      echo -e "\e[31mnot successful\e[0m"
      interface_scan
    fi
  }

  function ping_loop {
    count_ping=$((count_ping + 1))
    if [ "$count_ping_loops" -gt "$timeout_ping_loops" ]; then
      error="timeout_ping_loops"
      problem $error
    fi
    if [ "$count_ping" -le "$timeout_ping" ]; then
      count_restore_pings=$((count_restore_pings + 1))
      source_addr=$(ifconfig $interface | grep -Po '\b(?!255)(?:\d{1,3}\.){3}(?!255)\d{1,3}\b' 2> /dev/null)
      if [ "$source_addr" = "" ]; then
        source_def=$interface
      else
        source_def=$source_addr
      fi
      echo -en " [\e[90m"$(date +"%T")"\e[0m] Send PING ("$count_ping"/"$timeout_ping") to \e[1m"$ping_default"\e[0m from \e[1m"$source_def"\e[0m ("$count_restore_pings"): "
      ping -I "$source_def" -B -c 1 -n -w 4 $ping_default &> /dev/null
      if [ $? = 0 ]; then
        echo -e "\e[32mok\e[0m"
        connection_active
      else
        echo -e "\e[31mnot successful\e[0m"
        ping_loop
      fi
    else
      count_ping_loops=$((count_ping_loops + 1))
      please_wait
      sleep $pause_min
      error="timeout_ping"
      problem $error
    fi
  }

  # connection

  function connection_state_verify {
    while true; do
      count_state=$((count_state + 1))
      if [ "$count_state" -lt "$timeout_state" ]; then
        state=$(wpa_cli -i $interface status 2> /dev/null | grep "wpa_state" | awk -F "=" '{print $2}')
        if [ $state = "COMPLETED" ]; then
          echo
          interface_ip
        elif [ "$state" = "DISCONNECTED" ]; then
          echo
          error="disconnected"
          problem $error
        elif [ "$state" = "" ]; then
          echo
          error="no-state"
          problem $error
        elif [ "$state" = "INTERFACE_DISABLED" ]; then
          echo
          error="disabled"
          problem $error
        elif [ "$state" = "SCANNING" ]; then
          sleep $pause_min
          echo -n "."
        else
          sleep $pause_min
          echo -n "."
        fi
      else
        echo
        error="timeout_state"
        problem $error
      fi
      state="none"
      sleep $pause_max
    done
  }

  function connection_active {
    count_restored=$((count_restored + 1))
    date_restored=$(date +"%r")
    echo " ["$date_restored"] Connection active after "$count_restore_pings" attempt(s)" >> $log_file
    count_ping=0
    essid=$(iwconfig $interface | grep ESSID | awk -F: '{print $2}' 2> /dev/null)
    if [ "$save_ssid" = true ] && [ "$essid" != "" ]; then
      echo " ["$(date +"%r")"] Connected to: "$essid >> $log_file
    fi
    connection
  }

  function connection_lost {
    clear
    banner
    date_lost=$(date +"%r")
    echo " ["$date_lost"] Connection lost" >> $log_file
    interface_print
    line
    echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[1mConnection lost at "$date_lost"\e[0m"
    interface_reassociate
  }

  function connection {
    count_restore_pings=0
    cicles=0
    while true; do
      if [ "$cicles" -lt "$interval" ]; then
        signal_check=$(cat /proc/net/wireless | grep $interface)
        if [ "$signal_check" = "" ]; then
          connection_lost
        else
          print=$(output)
          echo "$print"
        fi
      else
        cicles=0
        dns_verify
      fi
      cicles=$((cicles + 1))
      signal_check="none"
      sleep $refresh
    done
  }

# DNS

  function dns_verify {
    count_restore_pings=$((count_restore_pings + 1))
    echo -en " [\e[90m"$(date +"%T")"\e[0m] Connection test: "
    host -s -4 $nameserver_default &> /dev/null
    if [ $? = 0 ]; then
      echo -e "\e[32mok\e[0m"
      line
      sleep $pause_min
      connection
    else
      echo -e "\e[31mnot successful\e[0m"
      connection_lost
    fi
  }

# prolems

  problem(){
    count_state=0
    if [ $1 = "" ]; then
      issue="undefined"
      errors=$((errors + 1))
    else
      issue=$1
      errors=$((errors + 1))
    fi
    line
    echo -e " [\e[90m"$(date +"%T")"\e[0m] Connection problem ("$issue")"
    if [ "$issue" = "reboot" ]; then
      error_reboot=$((error_reboot + 1))
      problem_table
      if [ "$error_reboot" -eq "5" ]; then
        error_reboot=0
        setup_restart
      fi
      interface_ip
    elif [ "$issue" = "no-state" ]; then
      error_no_state=$((error_no_state + 1))
      problem_table
      if [ "$error_no_state" -eq "5" ]; then
        error_no_state=0
        setup_restart
      fi
    elif [ "$issue" = "state" ]; then
      error_scan=$((error_scan + 1))
      interface_ip
    elif [ "$issue" = "timeout_state" ]; then
      error_timeout_state=$((error_timeout_state + 1))
      interface_down
    elif [ "$issue" = "disconnected" ]; then
      error_disconnected=$((error_disconnected + 1))
      problem_table
      if [ "$error_disconnected" -eq "5" ]; then
        error_disconnected=0
        setup_restart
      fi
      interface_reassociate
    elif [ "$issue" = "disabled" ]; then
      error_disabled=$((error_disabled + 1))
      problem_table
      if [ "$error_disabled" -eq "5" ]; then
        error_disabled=0
        setup_restart
      fi
    elif [ "$issue" = "timeout_dhcp" ]; then
      error_timeout_dhcp=$((error_timeout_dhcp + 1))
      interface_reassociate
    elif [ "$issue" = "timeout_dhcp_loops" ]; then
      error_timeout_dhcp_loops=$((error_timeout_dhcp_loops + 1))
      problem_table
      count_dhcp_loops=0
      interface_reboot
    elif [ "$issue" = "timeout_ping" ]; then
      error_timeout_ping=$((error_timeout_ping + 1))
      count_ping=0
      interface_reassociate
    elif [ "$issue" = "timeout_ping_loops" ]; then
      error_timeout_ping_loops=$((error_timeout_ping_loops + 1))
      problem_table
      count_ping_loops=0
      interface_reboot
    else
      error_undefined=$((error_undefined + 1))
      problem_table
    fi
    interface_reboot
  }

  function problem_table {
    line
    echo " Errors              : "$errors
    line
    echo " Interface ("$interface")"
    line
    echo -en "\e[90m"
    echo " Disconnected        : "$error_disconnected
    echo " Disabled            : "$error_disabled
    echo " Interface errors    : "$error_reboot
    echo " WPA state errors    : "$error_scan
    echo " WPA state timeouts  : "$error_timeout_state
    echo " No interface state  : "$error_no_state
    echo -en "\e[0m"
    line
    echo " Connection"
    line
    echo -en "\e[90m"
    echo " DHCP timeouts       : "$error_timeout_dhcp
    echo " DHCP loops timeout  : "$error_timeout_dhcp_loops
    echo " Ping timeout        : "$error_timeout_ping
    echo " Ping loop timeout   : "$error_timeout_ping_loops
    echo " Total restore pings : "$count_restore_pings
    echo -en "\e[0m"
    line
    echo -en "\e[90m"
    echo " Undefined errors    : "$error_undefined
    echo -en "\e[0m"
    line
    sleep $pause_min
  }

# output

  bytestohr(){
    unit=" bytes, KB, MB, GB, TB, PB, EB, ZB, YB"
    power=1
    value=$(echo "scale=2; $1 / 1" | bc)
    vint=$(echo $value / 1024 | bc)
    while [ ! $vint = "0" ]
    do
        let power=power+1
        value=$(echo "scale=2; $value / 1024" | bc)
        vint=$(echo $value / 1024 | bc)
    done
    echo $value$(echo $unit | cut -f$power -d,)
  }

  function connection_info {
    essid=$(iwconfig $interface | grep ESSID | awk -F: '{print $2}')
    ap=$(iwconfig $interface | grep -i access | awk -F " " '{print $6}')
    ip_and_sub=$(ip addr show $interface | grep 'inet ' | awk '{print $2}' | cut -f1)
    channel_and_freq=$(iw dev $interface info | grep -i "channel" | awk -F " " '{print $2" "$3" MHz)"}')
    key=$(wpa_cli -i $interface status 2> /dev/null | grep "key_mgmt" | awk -F "=" '{print $2}')
    echo " Interface    : "$interface
    line
    echo " Connected at : "$date_restored
    echo " Connected to : "$essid"("$ap")"
    echo " IP address   : "$ip_and_sub
    echo " Key          : "$key
    echo -n " Link quality : "
    link_quality
    echo -n " Signal level : "
    signal_level
    echo " Channel      : "$channel_and_freq
    line
    rx=$(iw dev $interface station dump | grep "rx bytes" | awk -F " " '{print $3}')
    tx=$(iw dev $interface station dump | grep "tx bytes" | awk -F " " '{print $3}')
    echo -n " Received     : "
    bytestohr $rx
    echo -n " Sent         : "
    bytestohr $tx
  }

  function link_quality {
    link=$(iwconfig $interface | grep -i "link" | awk -F "=" '{print $2}' | awk -F " " '{print $1}' | awk -F "/" '{print $1 / 70 * 100}')
    int=$(echo "($link + 0.5) / 1" | bc)
    if [ "$int" -ge "0" ] && [ "$int" -le "20" ]; then
      echo -e "\e[31m\u2022\e[0m "$int"%"
    elif [ "$int" -ge "20" ] && [ "$int" -le "35" ]; then
      echo -e "\e[91m\u2022\e[0m "$int"%"
    elif [ "$int" -ge "35" ] && [ "$int" -le "60" ]; then
      echo -e "\e[33m\u2022\e[0m "$int"%"
    elif [ "$int" -ge "60" ] && [ "$int" -le "80" ]; then
      echo -e "\e[93m\u2022\e[0m "$int"%"
    elif [ "$int" -ge "80" ] && [ "$int" -le "90" ]; then
      echo -e "\e[32m\u2022\e[0m "$int"%"
    elif [ "$int" -ge "90" ] && [ "$int" -le "100" ]; then
      echo -e "\e[92m\u2022\e[0m "$int"%"
    else
      echo $int"%"
    fi
  }

  function signal_level {
    signal=$(iwconfig $interface | grep -i "signal" | awk -F "=" '{print $3}' | awk -F " " '{print $1}')
    level=$(echo "($signal + 0.5) / 1" | bc | sed 's/-//g')
    if [ "$level" -ge "88" ] && [ "$level" -le "100" ]; then
      echo -e "\e[31m\u2022\e[0m -"$level" dBm"
    elif [ "$level" -ge "80" ] && [ "$level" -le "88" ]; then
      echo -e "\e[91m\u2022\e[0m -"$level" dBm"
    elif [ "$level" -ge "75" ] && [ "$level" -le "80" ]; then
      echo -e "\e[33m\u2022\e[0m -"$level" dBm"
    elif [ "$level" -ge "69" ] && [ "$level" -le "75" ]; then
      echo -e "\e[93m\u2022\e[0m -"$level" dBm"
    elif [ "$level" -ge "58" ] && [ "$level" -le "69" ]; then
      echo -e "\e[32m\u2022\e[0m -"$level" dBm"
    elif [ "$level" -ge "0" ] && [ "$level" -le "58" ]; then
      echo -e "\e[92m\u2022\e[0m -"$level" dBm"
    else
      echo "-"$level" dBm"
    fi
  }

  function please_wait {
    echo -e " [\e[90m"$(date +"%T")"\e[0m] \e[33mPlease wait\e[0m"
    echo -e " [\e[90m"$(date +"%T")"\e[0m] Restore of \e[1m"$interface"\e[0m in progress"
  }

  function output {
    clear
    banner
    connection_info
    line
    echo " Restored     : "$count_restored
    echo " Errors       : "$errors
    echo " Interval     : "$interval_visual" (seconds)"
    line
  }

  function line {
    echo -e "\e[90m------------------------------------------------------------------------------------/\e[0m"
  }

  function banner {
    line
    echo -e "\e[39m\e[1m WiRe ("$version") ~ "$wire_initiated" | Press Ctrl+C to exit"
    if [ "$save_log" = true ]; then
      echo -e " Log          : "$log_file"\e[0m\e[0m"
    else
    echo -en "\e[0m\e[0m"
    fi
    line
  }

# WiRe
# https://github.com/antoniogioiacom/wire
# antoniogioia.com

wire_start
